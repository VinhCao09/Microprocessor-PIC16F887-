CCS PCM C Compiler, Version 5.101, 43599               01-Apr-23 11:36

               Filename:   D:\processor\bai4\banphimmatran.lst

               ROM used:   1234 words (15%)
                           Largest free fragment is 2048
               RAM used:   34 (9%) at main() level
                           39 (11%) worst case
               Stack used: 2 locations
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   448
0003:  NOP
.................... #include<16f887.h>
.................... //////////// Standard Header file for the PIC16F887 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F887
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  EF
0009:  RETLW  DF
000A:  RETLW  BF
000B:  RETLW  7F
.................... 
.................... #list
.................... 
.................... #include<TV_PICKIT2_SHIFT_KEY4X4_138.c>
.................... unsigned int8 key_4x4()
*
0020:  MOVLW  FF
0021:  MOVWF  3D
.................... {
....................    const unsigned int8 maquet[]={0xef,0xdf,0xbf,0x7f};
....................    unsigned int8 mp=0xff,cot;
....................    for(cot=0;cot<4;cot++)
0022:  CLRF   3E
0023:  MOVF   3E,W
0024:  SUBLW  03
0025:  BTFSS  03.0
0026:  GOTO   066
....................    {
....................    output_b(maquet[cot]);
0027:  MOVF   3E,W
0028:  CALL   004
0029:  MOVWF  3F
002A:  BSF    03.5
002B:  CLRF   06
002C:  BCF    03.5
002D:  MOVF   3F,W
002E:  MOVWF  06
....................    while(input(pin_b0)==0) mp=cot*4;
002F:  BSF    03.5
0030:  BSF    06.0
0031:  BCF    03.5
0032:  BTFSC  06.0
0033:  GOTO   03A
0034:  RLF    3E,W
0035:  MOVWF  3D
0036:  RLF    3D,F
0037:  MOVLW  FC
0038:  ANDWF  3D,F
0039:  GOTO   02F
....................    while(input(pin_b1)==0) mp=cot*4+1;
003A:  BSF    03.5
003B:  BSF    06.1
003C:  BCF    03.5
003D:  BTFSC  06.1
003E:  GOTO   048
003F:  RLF    3E,W
0040:  MOVWF  77
0041:  RLF    77,F
0042:  MOVLW  FC
0043:  ANDWF  77,F
0044:  MOVF   77,W
0045:  ADDLW  01
0046:  MOVWF  3D
0047:  GOTO   03A
....................    while(input(pin_b2)==0) mp=cot*4+2;
0048:  BSF    03.5
0049:  BSF    06.2
004A:  BCF    03.5
004B:  BTFSC  06.2
004C:  GOTO   056
004D:  RLF    3E,W
004E:  MOVWF  77
004F:  RLF    77,F
0050:  MOVLW  FC
0051:  ANDWF  77,F
0052:  MOVF   77,W
0053:  ADDLW  02
0054:  MOVWF  3D
0055:  GOTO   048
....................    while(input(pin_b3)==0) mp=cot*4+3;
0056:  BSF    03.5
0057:  BSF    06.3
0058:  BCF    03.5
0059:  BTFSC  06.3
005A:  GOTO   064
005B:  RLF    3E,W
005C:  MOVWF  77
005D:  RLF    77,F
005E:  MOVLW  FC
005F:  ANDWF  77,F
0060:  MOVF   77,W
0061:  ADDLW  03
0062:  MOVWF  3D
0063:  GOTO   056
0064:  INCF   3E,F
0065:  GOTO   023
....................    }
....................    return mp;
0066:  MOVF   3D,W
0067:  MOVWF  78
.................... }
.................... 
.................... #fuses intrc_io
.................... #use delay(clock=8M)
*
000C:  MOVLW  3D
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  02
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  97
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETURN
.................... int32 i,LED,a,j,LED1,mp,m;
.................... //chuong trinh quet phim
....................       
....................           
.................... 
.................... 
.................... 
.................... 
.................... //chuong trinh check phim va kiem tra trong chuong trinh con
.................... //chong doi phim
.................... void check()
.................... {
.................... mp=key_4x4();
*
0068:  CLRF   37
0069:  CLRF   36
006A:  CLRF   35
006B:  MOVF   78,W
006C:  MOVWF  34
.................... if (mp==0) m=0;
006D:  MOVF   34,F
006E:  BTFSS  03.2
006F:  GOTO   07D
0070:  MOVF   35,F
0071:  BTFSS  03.2
0072:  GOTO   07D
0073:  MOVF   36,F
0074:  BTFSS  03.2
0075:  GOTO   07D
0076:  MOVF   37,F
0077:  BTFSS  03.2
0078:  GOTO   07D
0079:  CLRF   3B
007A:  CLRF   3A
007B:  CLRF   39
007C:  CLRF   38
.................... if (mp==1) m=1;
007D:  DECFSZ 34,W
007E:  GOTO   08D
007F:  MOVF   35,F
0080:  BTFSS  03.2
0081:  GOTO   08D
0082:  MOVF   36,F
0083:  BTFSS  03.2
0084:  GOTO   08D
0085:  MOVF   37,F
0086:  BTFSS  03.2
0087:  GOTO   08D
0088:  CLRF   3B
0089:  CLRF   3A
008A:  CLRF   39
008B:  MOVLW  01
008C:  MOVWF  38
.................... if (mp==2) m=2;
008D:  MOVF   34,W
008E:  SUBLW  02
008F:  BTFSS  03.2
0090:  GOTO   09F
0091:  MOVF   35,F
0092:  BTFSS  03.2
0093:  GOTO   09F
0094:  MOVF   36,F
0095:  BTFSS  03.2
0096:  GOTO   09F
0097:  MOVF   37,F
0098:  BTFSS  03.2
0099:  GOTO   09F
009A:  CLRF   3B
009B:  CLRF   3A
009C:  CLRF   39
009D:  MOVLW  02
009E:  MOVWF  38
.................... if (mp==3) m=3;
009F:  MOVF   34,W
00A0:  SUBLW  03
00A1:  BTFSS  03.2
00A2:  GOTO   0B1
00A3:  MOVF   35,F
00A4:  BTFSS  03.2
00A5:  GOTO   0B1
00A6:  MOVF   36,F
00A7:  BTFSS  03.2
00A8:  GOTO   0B1
00A9:  MOVF   37,F
00AA:  BTFSS  03.2
00AB:  GOTO   0B1
00AC:  CLRF   3B
00AD:  CLRF   3A
00AE:  CLRF   39
00AF:  MOVLW  03
00B0:  MOVWF  38
.................... if (mp==4) m=4;
00B1:  MOVF   34,W
00B2:  SUBLW  04
00B3:  BTFSS  03.2
00B4:  GOTO   0C3
00B5:  MOVF   35,F
00B6:  BTFSS  03.2
00B7:  GOTO   0C3
00B8:  MOVF   36,F
00B9:  BTFSS  03.2
00BA:  GOTO   0C3
00BB:  MOVF   37,F
00BC:  BTFSS  03.2
00BD:  GOTO   0C3
00BE:  CLRF   3B
00BF:  CLRF   3A
00C0:  CLRF   39
00C1:  MOVLW  04
00C2:  MOVWF  38
.................... if (mp==5) m=5;
00C3:  MOVF   34,W
00C4:  SUBLW  05
00C5:  BTFSS  03.2
00C6:  GOTO   0D5
00C7:  MOVF   35,F
00C8:  BTFSS  03.2
00C9:  GOTO   0D5
00CA:  MOVF   36,F
00CB:  BTFSS  03.2
00CC:  GOTO   0D5
00CD:  MOVF   37,F
00CE:  BTFSS  03.2
00CF:  GOTO   0D5
00D0:  CLRF   3B
00D1:  CLRF   3A
00D2:  CLRF   39
00D3:  MOVLW  05
00D4:  MOVWF  38
.................... if (mp==6) m=6;
00D5:  MOVF   34,W
00D6:  SUBLW  06
00D7:  BTFSS  03.2
00D8:  GOTO   0E7
00D9:  MOVF   35,F
00DA:  BTFSS  03.2
00DB:  GOTO   0E7
00DC:  MOVF   36,F
00DD:  BTFSS  03.2
00DE:  GOTO   0E7
00DF:  MOVF   37,F
00E0:  BTFSS  03.2
00E1:  GOTO   0E7
00E2:  CLRF   3B
00E3:  CLRF   3A
00E4:  CLRF   39
00E5:  MOVLW  06
00E6:  MOVWF  38
.................... if (mp==7) m=7;
00E7:  MOVF   34,W
00E8:  SUBLW  07
00E9:  BTFSS  03.2
00EA:  GOTO   0F9
00EB:  MOVF   35,F
00EC:  BTFSS  03.2
00ED:  GOTO   0F9
00EE:  MOVF   36,F
00EF:  BTFSS  03.2
00F0:  GOTO   0F9
00F1:  MOVF   37,F
00F2:  BTFSS  03.2
00F3:  GOTO   0F9
00F4:  CLRF   3B
00F5:  CLRF   3A
00F6:  CLRF   39
00F7:  MOVLW  07
00F8:  MOVWF  38
.................... if (mp==8) m=8;
00F9:  MOVF   34,W
00FA:  SUBLW  08
00FB:  BTFSS  03.2
00FC:  GOTO   10B
00FD:  MOVF   35,F
00FE:  BTFSS  03.2
00FF:  GOTO   10B
0100:  MOVF   36,F
0101:  BTFSS  03.2
0102:  GOTO   10B
0103:  MOVF   37,F
0104:  BTFSS  03.2
0105:  GOTO   10B
0106:  CLRF   3B
0107:  CLRF   3A
0108:  CLRF   39
0109:  MOVLW  08
010A:  MOVWF  38
.................... if (mp==9) m=9;
010B:  MOVF   34,W
010C:  SUBLW  09
010D:  BTFSS  03.2
010E:  GOTO   11D
010F:  MOVF   35,F
0110:  BTFSS  03.2
0111:  GOTO   11D
0112:  MOVF   36,F
0113:  BTFSS  03.2
0114:  GOTO   11D
0115:  MOVF   37,F
0116:  BTFSS  03.2
0117:  GOTO   11D
0118:  CLRF   3B
0119:  CLRF   3A
011A:  CLRF   39
011B:  MOVLW  09
011C:  MOVWF  38
011D:  RETURN
.................... }
....................    
.................... 
.................... void choptat()
.................... {
....................    for(i=0;i<3;i++)
011E:  CLRF   23
011F:  CLRF   22
0120:  CLRF   21
0121:  CLRF   20
0122:  MOVF   23,F
0123:  BTFSS  03.2
0124:  GOTO   171
0125:  MOVF   22,F
0126:  BTFSS  03.2
0127:  GOTO   171
0128:  MOVF   21,F
0129:  BTFSS  03.2
012A:  GOTO   171
012B:  MOVF   20,W
012C:  SUBLW  02
012D:  BTFSS  03.0
012E:  GOTO   171
....................    {
....................    
....................    led=0xFFFFFF; //1111 1111 1111 1111 1111 1111
012F:  CLRF   27
0130:  MOVLW  FF
0131:  MOVWF  26
0132:  MOVWF  25
0133:  MOVWF  24
....................    output_d(LED);
0134:  BSF    03.5
0135:  CLRF   08
0136:  BCF    03.5
0137:  MOVF   24,W
0138:  MOVWF  08
....................    output_c(LED>>8);
0139:  CLRF   41
013A:  MOVLW  00
013B:  MOVWF  3C
013C:  BSF    03.5
013D:  CLRF   07
013E:  BCF    03.5
013F:  MOVF   25,W
0140:  MOVWF  07
....................    output_a(LED>>16);
0141:  CLRF   40
0142:  CLRF   41
0143:  BSF    03.5
0144:  CLRF   05
0145:  BCF    03.5
0146:  MOVF   26,W
0147:  MOVWF  05
....................    delay_ms(50);
0148:  MOVLW  32
0149:  MOVWF  3D
014A:  CALL   00C
....................    check();
014B:  CALL   020
....................    led=0x000000; //0000 0000 0000 0000 0000 0000
014C:  CLRF   27
014D:  CLRF   26
014E:  CLRF   25
014F:  CLRF   24
....................    output_d(LED);
0150:  BSF    03.5
0151:  CLRF   08
0152:  BCF    03.5
0153:  MOVF   24,W
0154:  MOVWF  08
....................    output_c(LED>>8);
0155:  CLRF   41
0156:  MOVLW  00
0157:  MOVWF  3C
0158:  BSF    03.5
0159:  CLRF   07
015A:  BCF    03.5
015B:  MOVF   25,W
015C:  MOVWF  07
....................    output_a(LED>>16);
015D:  CLRF   40
015E:  CLRF   41
015F:  BSF    03.5
0160:  CLRF   05
0161:  BCF    03.5
0162:  MOVF   26,W
0163:  MOVWF  05
....................    delay_ms(50);
0164:  MOVLW  32
0165:  MOVWF  3D
0166:  CALL   00C
....................    check();
0167:  CALL   020
0168:  MOVLW  01
0169:  ADDWF  20,F
016A:  BTFSC  03.0
016B:  INCF   21,F
016C:  BTFSC  03.2
016D:  INCF   22,F
016E:  BTFSC  03.2
016F:  INCF   23,F
0170:  GOTO   122
....................  
....................    }
0171:  BCF    0A.3
0172:  BCF    0A.4
0173:  GOTO   4D0 (RETURN)
.................... }
.................... 
.................... void sangdanpst()
.................... {
.................... LED=0x000001; //0000 0000 0000 0000 0000 0001
0174:  CLRF   27
0175:  CLRF   26
0176:  CLRF   25
0177:  MOVLW  01
0178:  MOVWF  24
....................    for(i=0;i<=24;i++)
0179:  CLRF   23
017A:  CLRF   22
017B:  CLRF   21
017C:  CLRF   20
017D:  MOVF   23,F
017E:  BTFSS  03.2
017F:  GOTO   1C9
0180:  MOVF   22,F
0181:  BTFSS  03.2
0182:  GOTO   1C9
0183:  MOVF   21,F
0184:  BTFSS  03.2
0185:  GOTO   1C9
0186:  MOVF   20,W
0187:  SUBLW  18
0188:  BTFSS  03.0
0189:  GOTO   1C9
....................    {
.................... 
....................  
....................    LED=(LED<<1)+0x01;
018A:  BCF    03.0
018B:  RLF    24,W
018C:  MOVWF  3E
018D:  RLF    25,W
018E:  MOVWF  3F
018F:  RLF    26,W
0190:  MOVWF  40
0191:  RLF    27,W
0192:  MOVWF  41
0193:  MOVLW  01
0194:  ADDWF  3E,W
0195:  MOVWF  24
0196:  MOVF   3F,W
0197:  MOVWF  25
0198:  MOVLW  00
0199:  BTFSC  03.0
019A:  MOVLW  01
019B:  ADDWF  25,F
019C:  MOVF   40,W
019D:  MOVWF  26
019E:  MOVLW  00
019F:  BTFSC  03.0
01A0:  MOVLW  01
01A1:  ADDWF  26,F
01A2:  MOVF   41,W
01A3:  MOVWF  27
01A4:  MOVLW  00
01A5:  BTFSC  03.0
01A6:  MOVLW  01
01A7:  ADDWF  27,F
....................    output_d(LED);
01A8:  BSF    03.5
01A9:  CLRF   08
01AA:  BCF    03.5
01AB:  MOVF   24,W
01AC:  MOVWF  08
....................    output_c(LED>>8);
01AD:  CLRF   41
01AE:  MOVLW  00
01AF:  MOVWF  3C
01B0:  BSF    03.5
01B1:  CLRF   07
01B2:  BCF    03.5
01B3:  MOVF   25,W
01B4:  MOVWF  07
....................    output_a(LED>>16);
01B5:  CLRF   40
01B6:  CLRF   41
01B7:  BSF    03.5
01B8:  CLRF   05
01B9:  BCF    03.5
01BA:  MOVF   26,W
01BB:  MOVWF  05
....................    delay_ms(50);
01BC:  MOVLW  32
01BD:  MOVWF  3D
01BE:  CALL   00C
....................    check();
01BF:  CALL   020
01C0:  MOVLW  01
01C1:  ADDWF  20,F
01C2:  BTFSC  03.0
01C3:  INCF   21,F
01C4:  BTFSC  03.2
01C5:  INCF   22,F
01C6:  BTFSC  03.2
01C7:  INCF   23,F
01C8:  GOTO   17D
....................    }
01C9:  BCF    0A.3
01CA:  BCF    0A.4
01CB:  GOTO   4D0 (RETURN)
.................... }
.................... void sangdantsp()
.................... {
....................    for(i=0;i<=24;i++)
*
0211:  CLRF   23
0212:  CLRF   22
0213:  CLRF   21
0214:  CLRF   20
0215:  MOVF   23,F
0216:  BTFSS  03.2
0217:  GOTO   25F
0218:  MOVF   22,F
0219:  BTFSS  03.2
021A:  GOTO   25F
021B:  MOVF   21,F
021C:  BTFSS  03.2
021D:  GOTO   25F
021E:  MOVF   20,W
021F:  SUBLW  18
0220:  BTFSS  03.0
0221:  GOTO   25F
....................    {
.................... 
....................    LED=~(0xffffff>>i);
0222:  CLRF   7A
0223:  MOVLW  FF
0224:  MOVWF  79
0225:  MOVWF  78
0226:  MOVWF  77
0227:  MOVF   20,W
0228:  MOVWF  3D
0229:  BTFSC  03.2
022A:  GOTO   232
022B:  BCF    03.0
022C:  RRF    7A,F
022D:  RRF    79,F
022E:  RRF    78,F
022F:  RRF    77,F
0230:  DECFSZ 3D,F
0231:  GOTO   22B
0232:  MOVF   77,W
0233:  MOVWF  24
0234:  COMF   24,F
0235:  MOVF   78,W
0236:  MOVWF  25
0237:  COMF   25,F
0238:  MOVF   79,W
0239:  MOVWF  26
023A:  COMF   26,F
023B:  MOVF   7A,W
023C:  MOVWF  27
023D:  COMF   27,F
....................  
....................     output_d(LED);
023E:  BSF    03.5
023F:  CLRF   08
0240:  BCF    03.5
0241:  MOVF   24,W
0242:  MOVWF  08
....................    output_c(LED>>8);
0243:  CLRF   41
0244:  MOVLW  00
0245:  MOVWF  3C
0246:  BSF    03.5
0247:  CLRF   07
0248:  BCF    03.5
0249:  MOVF   25,W
024A:  MOVWF  07
....................    output_a(LED>>16);
024B:  CLRF   40
024C:  CLRF   41
024D:  BSF    03.5
024E:  CLRF   05
024F:  BCF    03.5
0250:  MOVF   26,W
0251:  MOVWF  05
....................    delay_ms(50);
0252:  MOVLW  32
0253:  MOVWF  3D
0254:  CALL   00C
....................    check();
0255:  CALL   020
0256:  MOVLW  01
0257:  ADDWF  20,F
0258:  BTFSC  03.0
0259:  INCF   21,F
025A:  BTFSC  03.2
025B:  INCF   22,F
025C:  BTFSC  03.2
025D:  INCF   23,F
025E:  GOTO   215
....................    }
025F:  BCF    0A.3
0260:  BCF    0A.4
0261:  GOTO   4D0 (RETURN)
....................  }
....................    
.................... void tatdanpst()
.................... {
....................    for(i=0;i<=24;i++)
0262:  CLRF   23
0263:  CLRF   22
0264:  CLRF   21
0265:  CLRF   20
0266:  MOVF   23,F
0267:  BTFSS  03.2
0268:  GOTO   2A4
0269:  MOVF   22,F
026A:  BTFSS  03.2
026B:  GOTO   2A4
026C:  MOVF   21,F
026D:  BTFSS  03.2
026E:  GOTO   2A4
026F:  MOVF   20,W
0270:  SUBLW  18
0271:  BTFSS  03.0
0272:  GOTO   2A4
....................    {
.................... 
....................  
....................    LED=0xffffff<<i; //1111 1111 1111 1111 1111 1111
0273:  CLRF   27
0274:  MOVLW  FF
0275:  MOVWF  26
0276:  MOVWF  25
0277:  MOVWF  24
0278:  MOVF   20,W
0279:  MOVWF  3D
027A:  BTFSC  03.2
027B:  GOTO   283
027C:  BCF    03.0
027D:  RLF    24,F
027E:  RLF    25,F
027F:  RLF    26,F
0280:  RLF    27,F
0281:  DECFSZ 3D,F
0282:  GOTO   27C
....................    output_d(LED);
0283:  BSF    03.5
0284:  CLRF   08
0285:  BCF    03.5
0286:  MOVF   24,W
0287:  MOVWF  08
....................    output_c(LED>>8);
0288:  CLRF   41
0289:  MOVLW  00
028A:  MOVWF  3C
028B:  BSF    03.5
028C:  CLRF   07
028D:  BCF    03.5
028E:  MOVF   25,W
028F:  MOVWF  07
....................    output_a(LED>>16);
0290:  CLRF   40
0291:  CLRF   41
0292:  BSF    03.5
0293:  CLRF   05
0294:  BCF    03.5
0295:  MOVF   26,W
0296:  MOVWF  05
....................    delay_ms(50);
0297:  MOVLW  32
0298:  MOVWF  3D
0299:  CALL   00C
....................    check();
029A:  CALL   020
029B:  MOVLW  01
029C:  ADDWF  20,F
029D:  BTFSC  03.0
029E:  INCF   21,F
029F:  BTFSC  03.2
02A0:  INCF   22,F
02A1:  BTFSC  03.2
02A2:  INCF   23,F
02A3:  GOTO   266
....................    }
02A4:  BCF    0A.3
02A5:  BCF    0A.4
02A6:  GOTO   4D0 (RETURN)
.................... }
.................... 
.................... void tatdantsp()
.................... {
....................    for(i=0;i<=24;i++)
*
01CC:  CLRF   23
01CD:  CLRF   22
01CE:  CLRF   21
01CF:  CLRF   20
01D0:  MOVF   23,F
01D1:  BTFSS  03.2
01D2:  GOTO   20E
01D3:  MOVF   22,F
01D4:  BTFSS  03.2
01D5:  GOTO   20E
01D6:  MOVF   21,F
01D7:  BTFSS  03.2
01D8:  GOTO   20E
01D9:  MOVF   20,W
01DA:  SUBLW  18
01DB:  BTFSS  03.0
01DC:  GOTO   20E
....................    {
.................... 
.................... 
....................    LED=0xffffff>>i;
01DD:  CLRF   27
01DE:  MOVLW  FF
01DF:  MOVWF  26
01E0:  MOVWF  25
01E1:  MOVWF  24
01E2:  MOVF   20,W
01E3:  MOVWF  3D
01E4:  BTFSC  03.2
01E5:  GOTO   1ED
01E6:  BCF    03.0
01E7:  RRF    27,F
01E8:  RRF    26,F
01E9:  RRF    25,F
01EA:  RRF    24,F
01EB:  DECFSZ 3D,F
01EC:  GOTO   1E6
....................    output_d(LED);
01ED:  BSF    03.5
01EE:  CLRF   08
01EF:  BCF    03.5
01F0:  MOVF   24,W
01F1:  MOVWF  08
....................    output_c(LED>>8);
01F2:  CLRF   41
01F3:  MOVLW  00
01F4:  MOVWF  3C
01F5:  BSF    03.5
01F6:  CLRF   07
01F7:  BCF    03.5
01F8:  MOVF   25,W
01F9:  MOVWF  07
....................    output_a(LED>>16);
01FA:  CLRF   40
01FB:  CLRF   41
01FC:  BSF    03.5
01FD:  CLRF   05
01FE:  BCF    03.5
01FF:  MOVF   26,W
0200:  MOVWF  05
....................    delay_ms(50);
0201:  MOVLW  32
0202:  MOVWF  3D
0203:  CALL   00C
....................  check();
0204:  CALL   020
0205:  MOVLW  01
0206:  ADDWF  20,F
0207:  BTFSC  03.0
0208:  INCF   21,F
0209:  BTFSC  03.2
020A:  INCF   22,F
020B:  BTFSC  03.2
020C:  INCF   23,F
020D:  GOTO   1D0
....................    }
020E:  BCF    0A.3
020F:  BCF    0A.4
0210:  GOTO   4D0 (RETURN)
.................... }
....................  
.................... void sangdichpst()
.................... {
....................    for(i=0;i<=24;i++)
*
02A7:  CLRF   23
02A8:  CLRF   22
02A9:  CLRF   21
02AA:  CLRF   20
02AB:  MOVF   23,F
02AC:  BTFSS  03.2
02AD:  GOTO   2E9
02AE:  MOVF   22,F
02AF:  BTFSS  03.2
02B0:  GOTO   2E9
02B1:  MOVF   21,F
02B2:  BTFSS  03.2
02B3:  GOTO   2E9
02B4:  MOVF   20,W
02B5:  SUBLW  18
02B6:  BTFSS  03.0
02B7:  GOTO   2E9
....................    {
.................... 
.................... 
....................    LED=0x000001<<i; 
02B8:  CLRF   27
02B9:  CLRF   26
02BA:  CLRF   25
02BB:  MOVLW  01
02BC:  MOVWF  24
02BD:  MOVF   20,W
02BE:  MOVWF  3D
02BF:  BTFSC  03.2
02C0:  GOTO   2C8
02C1:  BCF    03.0
02C2:  RLF    24,F
02C3:  RLF    25,F
02C4:  RLF    26,F
02C5:  RLF    27,F
02C6:  DECFSZ 3D,F
02C7:  GOTO   2C1
....................    output_d(LED);
02C8:  BSF    03.5
02C9:  CLRF   08
02CA:  BCF    03.5
02CB:  MOVF   24,W
02CC:  MOVWF  08
....................    output_c(LED>>8);
02CD:  CLRF   41
02CE:  MOVLW  00
02CF:  MOVWF  3C
02D0:  BSF    03.5
02D1:  CLRF   07
02D2:  BCF    03.5
02D3:  MOVF   25,W
02D4:  MOVWF  07
....................    output_a(LED>>16);
02D5:  CLRF   40
02D6:  CLRF   41
02D7:  BSF    03.5
02D8:  CLRF   05
02D9:  BCF    03.5
02DA:  MOVF   26,W
02DB:  MOVWF  05
....................    delay_ms(50);
02DC:  MOVLW  32
02DD:  MOVWF  3D
02DE:  CALL   00C
....................   check();
02DF:  CALL   020
02E0:  MOVLW  01
02E1:  ADDWF  20,F
02E2:  BTFSC  03.0
02E3:  INCF   21,F
02E4:  BTFSC  03.2
02E5:  INCF   22,F
02E6:  BTFSC  03.2
02E7:  INCF   23,F
02E8:  GOTO   2AB
....................    }
02E9:  BCF    0A.3
02EA:  BCF    0A.4
02EB:  GOTO   4D0 (RETURN)
.................... }
.................... 
.................... void sangdichtsp()
.................... {
....................    for(i=0;i<=24;i++)
02EC:  CLRF   23
02ED:  CLRF   22
02EE:  CLRF   21
02EF:  CLRF   20
02F0:  MOVF   23,F
02F1:  BTFSS  03.2
02F2:  GOTO   32F
02F3:  MOVF   22,F
02F4:  BTFSS  03.2
02F5:  GOTO   32F
02F6:  MOVF   21,F
02F7:  BTFSS  03.2
02F8:  GOTO   32F
02F9:  MOVF   20,W
02FA:  SUBLW  18
02FB:  BTFSS  03.0
02FC:  GOTO   32F
....................    {
....................    LED=0x800001>>i;  
02FD:  CLRF   27
02FE:  MOVLW  80
02FF:  MOVWF  26
0300:  CLRF   25
0301:  MOVLW  01
0302:  MOVWF  24
0303:  MOVF   20,W
0304:  MOVWF  3D
0305:  BTFSC  03.2
0306:  GOTO   30E
0307:  BCF    03.0
0308:  RRF    27,F
0309:  RRF    26,F
030A:  RRF    25,F
030B:  RRF    24,F
030C:  DECFSZ 3D,F
030D:  GOTO   307
....................    output_d(LED);
030E:  BSF    03.5
030F:  CLRF   08
0310:  BCF    03.5
0311:  MOVF   24,W
0312:  MOVWF  08
....................    output_c(LED>>8);
0313:  CLRF   41
0314:  MOVLW  00
0315:  MOVWF  3C
0316:  BSF    03.5
0317:  CLRF   07
0318:  BCF    03.5
0319:  MOVF   25,W
031A:  MOVWF  07
....................    output_a(LED>>16);
031B:  CLRF   40
031C:  CLRF   41
031D:  BSF    03.5
031E:  CLRF   05
031F:  BCF    03.5
0320:  MOVF   26,W
0321:  MOVWF  05
....................    delay_ms(50);
0322:  MOVLW  32
0323:  MOVWF  3D
0324:  CALL   00C
....................    check();
0325:  CALL   020
0326:  MOVLW  01
0327:  ADDWF  20,F
0328:  BTFSC  03.0
0329:  INCF   21,F
032A:  BTFSC  03.2
032B:  INCF   22,F
032C:  BTFSC  03.2
032D:  INCF   23,F
032E:  GOTO   2F0
....................    }
032F:  BCF    0A.3
0330:  BCF    0A.4
0331:  GOTO   4D0 (RETURN)
.................... }
.................... 
.................... void sangdich3ledpst()
.................... {
....................    for(i=0;i<=24;i++)
0332:  CLRF   23
0333:  CLRF   22
0334:  CLRF   21
0335:  CLRF   20
0336:  MOVF   23,F
0337:  BTFSS  03.2
0338:  GOTO   374
0339:  MOVF   22,F
033A:  BTFSS  03.2
033B:  GOTO   374
033C:  MOVF   21,F
033D:  BTFSS  03.2
033E:  GOTO   374
033F:  MOVF   20,W
0340:  SUBLW  18
0341:  BTFSS  03.0
0342:  GOTO   374
....................    {
.................... 
....................    check();
0343:  CALL   020
....................    LED=0x000007<<i;
0344:  CLRF   27
0345:  CLRF   26
0346:  CLRF   25
0347:  MOVLW  07
0348:  MOVWF  24
0349:  MOVF   20,W
034A:  MOVWF  3D
034B:  BTFSC  03.2
034C:  GOTO   354
034D:  BCF    03.0
034E:  RLF    24,F
034F:  RLF    25,F
0350:  RLF    26,F
0351:  RLF    27,F
0352:  DECFSZ 3D,F
0353:  GOTO   34D
....................    output_d(LED);
0354:  BSF    03.5
0355:  CLRF   08
0356:  BCF    03.5
0357:  MOVF   24,W
0358:  MOVWF  08
....................    output_c(LED>>8);
0359:  CLRF   41
035A:  MOVLW  00
035B:  MOVWF  3C
035C:  BSF    03.5
035D:  CLRF   07
035E:  BCF    03.5
035F:  MOVF   25,W
0360:  MOVWF  07
....................    output_a(LED>>16);
0361:  CLRF   40
0362:  CLRF   41
0363:  BSF    03.5
0364:  CLRF   05
0365:  BCF    03.5
0366:  MOVF   26,W
0367:  MOVWF  05
....................    delay_ms(50);
0368:  MOVLW  32
0369:  MOVWF  3D
036A:  CALL   00C
036B:  MOVLW  01
036C:  ADDWF  20,F
036D:  BTFSC  03.0
036E:  INCF   21,F
036F:  BTFSC  03.2
0370:  INCF   22,F
0371:  BTFSC  03.2
0372:  INCF   23,F
0373:  GOTO   336
.................... 
....................    }
0374:  BCF    0A.3
0375:  BCF    0A.4
0376:  GOTO   4D0 (RETURN)
.................... }
.................... 
.................... void sangdich3ledtsp()
.................... {
....................    for(i=0;i<=24;i++)
0377:  CLRF   23
0378:  CLRF   22
0379:  CLRF   21
037A:  CLRF   20
037B:  MOVF   23,F
037C:  BTFSS  03.2
037D:  GOTO   3B9
037E:  MOVF   22,F
037F:  BTFSS  03.2
0380:  GOTO   3B9
0381:  MOVF   21,F
0382:  BTFSS  03.2
0383:  GOTO   3B9
0384:  MOVF   20,W
0385:  SUBLW  18
0386:  BTFSS  03.0
0387:  GOTO   3B9
....................    { 
.................... 
.................... 
....................    LED=0xE00000>>i;
0388:  CLRF   27
0389:  MOVLW  E0
038A:  MOVWF  26
038B:  CLRF   25
038C:  CLRF   24
038D:  MOVF   20,W
038E:  MOVWF  3D
038F:  BTFSC  03.2
0390:  GOTO   398
0391:  BCF    03.0
0392:  RRF    27,F
0393:  RRF    26,F
0394:  RRF    25,F
0395:  RRF    24,F
0396:  DECFSZ 3D,F
0397:  GOTO   391
....................    output_d(LED);
0398:  BSF    03.5
0399:  CLRF   08
039A:  BCF    03.5
039B:  MOVF   24,W
039C:  MOVWF  08
....................    output_c(LED>>8);
039D:  CLRF   41
039E:  MOVLW  00
039F:  MOVWF  3C
03A0:  BSF    03.5
03A1:  CLRF   07
03A2:  BCF    03.5
03A3:  MOVF   25,W
03A4:  MOVWF  07
....................    output_a(LED>>16);
03A5:  CLRF   40
03A6:  CLRF   41
03A7:  BSF    03.5
03A8:  CLRF   05
03A9:  BCF    03.5
03AA:  MOVF   26,W
03AB:  MOVWF  05
....................    delay_ms(50);
03AC:  MOVLW  32
03AD:  MOVWF  3D
03AE:  CALL   00C
....................    check();
03AF:  CALL   020
03B0:  MOVLW  01
03B1:  ADDWF  20,F
03B2:  BTFSC  03.0
03B3:  INCF   21,F
03B4:  BTFSC  03.2
03B5:  INCF   22,F
03B6:  BTFSC  03.2
03B7:  INCF   23,F
03B8:  GOTO   37B
.................... 
....................    }
03B9:  BCF    0A.3
03BA:  BCF    0A.4
03BB:  GOTO   4D0 (RETURN)
.................... } 
.................... 
.................... void sangdontsp()
.................... {
.................... a=0;
03BC:  CLRF   2B
03BD:  CLRF   2A
03BE:  CLRF   29
03BF:  CLRF   28
.................... for(i=0;i<24;i++)
03C0:  CLRF   23
03C1:  CLRF   22
03C2:  CLRF   21
03C3:  CLRF   20
03C4:  MOVF   23,F
03C5:  BTFSS  03.2
03C6:  GOTO   445
03C7:  MOVF   22,F
03C8:  BTFSS  03.2
03C9:  GOTO   445
03CA:  MOVF   21,F
03CB:  BTFSS  03.2
03CC:  GOTO   445
03CD:  MOVF   20,W
03CE:  SUBLW  17
03CF:  BTFSS  03.0
03D0:  GOTO   445
....................    {
....................    
....................    LED1=0x800000; 
03D1:  CLRF   33
03D2:  MOVLW  80
03D3:  MOVWF  32
03D4:  CLRF   31
03D5:  CLRF   30
....................    for(j=0;j<24-i;j++)
03D6:  CLRF   2F
03D7:  CLRF   2E
03D8:  CLRF   2D
03D9:  CLRF   2C
03DA:  MOVF   20,W
03DB:  SUBLW  18
03DC:  MOVWF  77
03DD:  CLRF   78
03DE:  MOVF   21,W
03DF:  BTFSS  03.0
03E0:  INCFSZ 21,W
03E1:  SUBWF  78,F
03E2:  CLRF   79
03E3:  MOVF   22,W
03E4:  BTFSS  03.0
03E5:  INCFSZ 22,W
03E6:  SUBWF  79,F
03E7:  CLRF   7A
03E8:  MOVF   23,W
03E9:  BTFSS  03.0
03EA:  INCFSZ 23,W
03EB:  SUBWF  7A,F
03EC:  MOVF   2F,W
03ED:  SUBWF  7A,W
03EE:  BTFSS  03.0
03EF:  GOTO   434
03F0:  BTFSS  03.2
03F1:  GOTO   402
03F2:  MOVF   2E,W
03F3:  SUBWF  79,W
03F4:  BTFSS  03.0
03F5:  GOTO   434
03F6:  BTFSS  03.2
03F7:  GOTO   402
03F8:  MOVF   2D,W
03F9:  SUBWF  78,W
03FA:  BTFSS  03.0
03FB:  GOTO   434
03FC:  BTFSS  03.2
03FD:  GOTO   402
03FE:  MOVF   77,W
03FF:  SUBWF  2C,W
0400:  BTFSC  03.0
0401:  GOTO   434
....................    {
....................       LED=LED1|a;
0402:  MOVF   30,W
0403:  IORWF  28,W
0404:  MOVWF  24
0405:  MOVF   31,W
0406:  IORWF  29,W
0407:  MOVWF  25
0408:  MOVF   32,W
0409:  IORWF  2A,W
040A:  MOVWF  26
040B:  MOVF   33,W
040C:  IORWF  2B,W
040D:  MOVWF  27
....................       
....................       output_d(LED);
040E:  BSF    03.5
040F:  CLRF   08
0410:  BCF    03.5
0411:  MOVF   24,W
0412:  MOVWF  08
....................       output_c(LED>>8);
0413:  CLRF   41
0414:  MOVLW  00
0415:  MOVWF  3C
0416:  BSF    03.5
0417:  CLRF   07
0418:  BCF    03.5
0419:  MOVF   25,W
041A:  MOVWF  07
....................       output_a(LED>>16);
041B:  CLRF   40
041C:  CLRF   41
041D:  BSF    03.5
041E:  CLRF   05
041F:  BCF    03.5
0420:  MOVF   26,W
0421:  MOVWF  05
....................       delay_ms(50);
0422:  MOVLW  32
0423:  MOVWF  3D
0424:  CALL   00C
....................       LED1=LED1>>1;
0425:  BCF    03.0
0426:  RRF    33,F
0427:  RRF    32,F
0428:  RRF    31,F
0429:  RRF    30,F
....................       check();
042A:  CALL   020
042B:  MOVLW  01
042C:  ADDWF  2C,F
042D:  BTFSC  03.0
042E:  INCF   2D,F
042F:  BTFSC  03.2
0430:  INCF   2E,F
0431:  BTFSC  03.2
0432:  INCF   2F,F
0433:  GOTO   3DA
....................    }
....................    a=LED; 
0434:  MOVF   27,W
0435:  MOVWF  2B
0436:  MOVF   26,W
0437:  MOVWF  2A
0438:  MOVF   25,W
0439:  MOVWF  29
043A:  MOVF   24,W
043B:  MOVWF  28
043C:  MOVLW  01
043D:  ADDWF  20,F
043E:  BTFSC  03.0
043F:  INCF   21,F
0440:  BTFSC  03.2
0441:  INCF   22,F
0442:  BTFSC  03.2
0443:  INCF   23,F
0444:  GOTO   3C4
....................    }
0445:  BCF    0A.3
0446:  BCF    0A.4
0447:  GOTO   4D0 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void main()
0448:  MOVF   03,W
0449:  ANDLW  1F
044A:  MOVWF  03
044B:  MOVLW  71
044C:  BSF    03.5
044D:  MOVWF  0F
044E:  CLRF   10
044F:  MOVF   0F,W
0450:  MOVLW  FF
0451:  BCF    03.5
0452:  MOVWF  3C
0453:  BSF    03.5
0454:  BSF    03.6
0455:  MOVF   09,W
0456:  ANDLW  C0
0457:  MOVWF  09
0458:  BCF    03.6
0459:  BCF    1F.4
045A:  BCF    1F.5
045B:  MOVLW  00
045C:  BSF    03.6
045D:  MOVWF  08
045E:  BCF    03.5
045F:  CLRF   07
0460:  CLRF   08
0461:  CLRF   09
0462:  BCF    03.7
.................... {
.................... set_tris_d(0);
0463:  MOVLW  00
0464:  BSF    03.5
0465:  BCF    03.6
0466:  MOVWF  08
.................... set_tris_c(0);
0467:  MOVWF  07
0468:  BCF    03.5
0469:  MOVWF  3C
.................... set_tris_a(0);
046A:  BSF    03.5
046B:  MOVWF  05
.................... set_tris_b(0xff);
046C:  MOVLW  FF
046D:  MOVWF  06
.................... set_tris_e(1);
046E:  BSF    09.0
046F:  BCF    09.1
0470:  BCF    09.2
0471:  BCF    09.3
.................... 
.................... 
.................... 
.................... while(true)
.................... {
....................     switch (m) 
0472:  BCF    03.5
0473:  MOVF   38,W
0474:  MOVWF  77
0475:  MOVF   39,W
0476:  MOVWF  7A
0477:  MOVF   7A,W
0478:  BTFSS  03.2
0479:  GOTO   47D
047A:  MOVF   77,F
047B:  BTFSC  03.2
047C:  GOTO   4BD
047D:  MOVF   7A,W
047E:  BTFSS  03.2
047F:  GOTO   484
0480:  MOVLW  01
0481:  SUBWF  77,W
0482:  BTFSC  03.2
0483:  GOTO   4BF
0484:  MOVF   7A,W
0485:  BTFSS  03.2
0486:  GOTO   48B
0487:  MOVLW  02
0488:  SUBWF  77,W
0489:  BTFSC  03.2
048A:  GOTO   4C1
048B:  MOVF   7A,W
048C:  BTFSS  03.2
048D:  GOTO   492
048E:  MOVLW  03
048F:  SUBWF  77,W
0490:  BTFSC  03.2
0491:  GOTO   4C3
0492:  MOVF   7A,W
0493:  BTFSS  03.2
0494:  GOTO   499
0495:  MOVLW  04
0496:  SUBWF  77,W
0497:  BTFSC  03.2
0498:  GOTO   4C5
0499:  MOVF   7A,W
049A:  BTFSS  03.2
049B:  GOTO   4A0
049C:  MOVLW  05
049D:  SUBWF  77,W
049E:  BTFSC  03.2
049F:  GOTO   4C7
04A0:  MOVF   7A,W
04A1:  BTFSS  03.2
04A2:  GOTO   4A7
04A3:  MOVLW  06
04A4:  SUBWF  77,W
04A5:  BTFSC  03.2
04A6:  GOTO   4C9
04A7:  MOVF   7A,W
04A8:  BTFSS  03.2
04A9:  GOTO   4AE
04AA:  MOVLW  07
04AB:  SUBWF  77,W
04AC:  BTFSC  03.2
04AD:  GOTO   4CB
04AE:  MOVF   7A,W
04AF:  BTFSS  03.2
04B0:  GOTO   4B5
04B1:  MOVLW  08
04B2:  SUBWF  77,W
04B3:  BTFSC  03.2
04B4:  GOTO   4CD
04B5:  MOVF   7A,W
04B6:  BTFSS  03.2
04B7:  GOTO   4BC
04B8:  MOVLW  09
04B9:  SUBWF  77,W
04BA:  BTFSC  03.2
04BB:  GOTO   4CF
04BC:  GOTO   4D0
....................          {
....................     case 0:
....................       choptat();
04BD:  GOTO   11E
....................       break;
04BE:  GOTO   4D0
....................     case 1:
....................       sangdanpst();
04BF:  GOTO   174
....................       break;
04C0:  GOTO   4D0
....................     case 2:
....................    tatdantsp();
04C1:  GOTO   1CC
....................          
....................          break;
04C2:  GOTO   4D0
....................      case 3:
....................          sangdantsp();  
04C3:  GOTO   211
....................          
....................         break;
04C4:  GOTO   4D0
....................      case 4: 
....................          tatdanpst();
04C5:  GOTO   262
....................              
....................         break;
04C6:  GOTO   4D0
....................       case 5:
....................          sangdichpst();
04C7:  GOTO   2A7
....................             
....................         break;
04C8:  GOTO   4D0
....................       case 6:
....................          sangdichtsp();    
04C9:  GOTO   2EC
....................          break;
04CA:  GOTO   4D0
....................         case 7:
....................          sangdich3ledpst();    
04CB:  GOTO   332
....................          break;
04CC:  GOTO   4D0
....................        case 8:
....................        sangdich3ledtsp();    
04CD:  GOTO   377
....................        break;
04CE:  GOTO   4D0
....................         case 9:
....................        sangdontsp();    
04CF:  GOTO   3BC
....................        break;
....................     default:
....................         // default statements
....................          }
04D0:  GOTO   473
....................    
.................... }
....................    
.................... }
04D1:  SLEEP

Configuration Fuses:
   Word  1: 2FE4   INTRC_IO NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
